# -*- coding: utf-8 -*-
"""Ejercicios_NumPy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jZQsAQ0IdSfAE7BdoAkudTR3NWWVykiU

**Ejercicio 1.** Crear un vector con los números del 0 al 9 usando arange().
"""

import numpy as np
vector_0_9 = np.arange(10)
print("\n Vector del 0 al 9:")
print(vector_0_9)

"""**Ejercicio 2.** Crear una matriz 3x3 de unos."""

import numpy as np
matriz_unos = np.ones((3, 3))
print("\n Matriz 3x3 de unos:")
print(matriz_unos)

"""**Ejercicio 3.** Generar una matriz identidad de orden 4."""

import numpy as np
matriz_identidad = np.eye(4)
print("\n Matriz identidad 4x4:")
print(matriz_identidad)

"""**Ejercicio 4.** Crear un vector con 10 números equidistantes entre 1 y 5."""

import numpy as np
vector_equidist = np.linspace(1, 5, 10)
print("\n Vector con 10 números equidistantes entre 1 y 5:")
print(vector_equidist)

"""**Ejercicio 5.** Crear una matriz 2x3 de números aleatorios entre 0 y 1."""

import numpy as np
matriz_aleatoria_0_1 = np.random.rand(2, 3)
print("\n Matriz 2x3 con números aleatorios entre 0 y 1:")
print(matriz_aleatoria_0_1)

"""**Ejercicio 6.** Crear una matriz 4x5 con números enteros aleatorios entre 10 y 50. Obtener:

•	El número mayor y menor.

•	La media y la desviación estándar.

"""

import numpy as np
matriz_4x5 = np.random.randint(10, 51, size=(4, 5))  # 51 porque el límite superior es exclusivo
print("\n Matriz 4x5 con enteros aleatorios entre 10 y 50:")
print(matriz_4x5)

#Número mayor y menor
max_val = matriz_4x5.max()
min_val = matriz_4x5.min()
print("Número mayor:", max_val)
print("Número menor:", min_val)

#Media y desviación estándar
media = matriz_4x5.mean()
desviacion = matriz_4x5.std()
print("Media:", media)
print("Desviación estándar:", desviacion)

"""**Ejercicio 7.** Dada la matriz anterior (matriz 4x5 con números enteros aleatorios entre 10 y 50), seleccionar todos los elementos mayores a 30."""

import numpy as np
matriz_4x5 = np.random.randint(10, 51, size=(4, 5))
mayores_30 = matriz_4x5[matriz_4x5 > 30]
print("\n Elementos mayores a 30:")
print(mayores_30)

"""**Ejercicio 8.** Crear un arreglo de 12 elementos y redimensionar a matriz 3x4."""

import numpy as np
arreglo_12 = np.arange(12)
matriz_3x4 = arreglo_12.reshape((3, 4))
print("\n Arreglo de 12 elementos redimensionado a 3x4:")
print(matriz_3x4)
# reshape cambia la forma del arreglo sin alterar datos.

"""**Ejercicio 9.** Sumar dos matrices del mismo tamaño generadas aleatoriamente"""

import numpy as np
matriz_a = np.random.rand(3, 3)
matriz_b = np.random.rand(3, 3)
suma = matriz_a + matriz_b
print("\n Suma de dos matrices 3x3 aleatorias:")
print("Matriz A:\n", matriz_a)
print("Matriz B:\n", matriz_b)
print("Suma:\n", suma)

"""**Ejercicio 10.** Multiplicar una matriz por un escalar y aplicar la raíz cuadrada a sus elementos."""

import numpy as np
matriz_esc = np.array([[4, 9], [16, 25]])
escalar = 2
matriz_multiplicada = matriz_esc * escalar
raiz_cuadrada = np.sqrt(matriz_multiplicada)
print("\n10 Matriz multiplicada por escalar y raíz cuadrada:")
print("Matriz original:\n", matriz_esc)
print("Multiplicada por", escalar, ":\n", matriz_multiplicada)
print("Raíz cuadrada de la multiplicada:\n", raiz_cuadrada)
# np.sqrt aplica raíz cuadrada elemento a elemento.

"""**Ejercicio 11.** Simular una matriz 6x6 de temperaturas (valores entre 15 y 35°C) y calcular:

•	Promedio por fila.

•	Máximo por columna.

•	Temperaturas mayores a 30°C.

"""

import numpy as np
temp_6x6 = np.random.uniform(15, 35, (6, 6))
print("\n Matriz 6x6 de temperaturas (15 a 35°C):")
print(temp_6x6)

# Promedio por fila
promedio_filas = temp_6x6.mean(axis=1)
print("Promedio por fila:", promedio_filas)

# Máximo por columna
maximo_columnas = temp_6x6.max(axis=0)
print("Máximo por columna:", maximo_columnas)

# Temperaturas mayores a 30°C
temp_mayores_30 = temp_6x6[temp_6x6 > 30]
print("Temperaturas mayores a 30°C:", temp_mayores_30)

"""**Ejercicio 12**. Generar una matriz de 10 filas y 3 columnas que simule calificaciones (1.0 a 7.0). Obtener:

•	Promedio general.

•	Estudiantes que aprobaron todas las materias.

"""

import numpy as np
# Generar matriz 10x3 con calificaciones entre 1.0 y 7.0
calificaciones = np.random.uniform(1.0, 7.0, (10, 3))

print("Calificaciones simuladas (10 estudiantes, 3 materias):")
print(np.round(calificaciones, 2))  # Redondeo para mejor visualización

# Promedio general (de todas las notas)
promedio_general = calificaciones.mean()
print("\n Promedio general:", round(promedio_general, 2))

# Estudiantes que aprobaron todas las materias
# Se aprueba con nota >= 4.0
aprobados_todas = np.all(calificaciones >= 4.0, axis=1)

print("\n Estudiantes que aprobaron todas las materias (True = aprobó todas):")
print(aprobados_todas)

"""**Ejercicio 13.** Crear un vector aleatorio de 100 elementos entre 0 y 100 y calcular el porcentaje de valores entre 50 y 70."""

import numpy as np
vector_100 = np.random.uniform(0, 100, 100)
# Porcentaje de valores entre 50 y 70
condicion = (vector_100 >= 50) & (vector_100 <= 70)
porcentaje_50_70 = np.sum(condicion) / vector_100.size * 100
print("\n Porcentaje de valores entre 50 y 70:", porcentaje_50_70, "%")

"""**Ejercicio 14.** Comparar dos matrices 3x3 aleatorias. Mostrar dónde son iguales y dónde diferentes."""

import numpy as np
matriz_x = np.random.randint(0, 5, (3, 3))
matriz_y = np.random.randint(0, 5, (3, 3))
comparacion = matriz_x == matriz_y
print("\n Comparación de dos matrices 3x3:")
print("Matriz X:\n", matriz_x)
print("Matriz Y:\n", matriz_y)
print("Elementos iguales:\n", comparacion)
print("Elementos diferentes:\n", ~comparacion)
# ~ es el operador NOT para invertir booleanos.

"""**Ejercicio 15.** Crear una matriz 5x5 de enteros aleatorios y:

•	Obtener su transpuesta.

•	Restar la matriz original con su transpuesta.

•	Aplicar np.exp a cada elemento.

"""

import numpy as np
matriz_5x5 = np.random.randint(1, 10, (5, 5))
print("\n Matriz 5x5 original:")
print(matriz_5x5)

#Transpuesta
transpuesta = matriz_5x5.T
print("Transpuesta:")
print(transpuesta)

#Resta de matriz original y su transpuesta
resta = matriz_5x5 - transpuesta
print("Resta original - transpuesta:")
print(resta)

#Aplicar np.exp a cada elemento
exp_mat = np.exp(matriz_5x5)
print("np.exp aplicado a cada elemento:")
print(exp_mat)

"""**Ejercicio 16.** La empresa Comercial XYZ tiene una tienda que vende varios productos. Se registraron los precios de cada producto y la cantidad de unidades vendidas durante 5 días consecutivos.

Para ello, debe:

Crear una clase llamada Tienda que reciba como parámetros los precios de los productos, las unidades vendidas (una matriz productos × días) y el nombre de la tienda.

Implementar métodos dentro de la clase para calcular:

Los ingresos totales de la tienda por cada día.

El día con la mayor recaudación y el monto vendido ese día.

Los dos productos que generaron más ingresos durante la semana.

Los días en que la tienda logró ventas superiores a un monto umbral (por ejemplo, $400,000).
"""

import numpy as np

class Tienda:
    def __init__(self, precios, unidades_vendidas, nombre):
        """
        precios: array 1D con precios por producto
        unidades_vendidas: matriz (productos x días) con unidades vendidas
        nombre: nombre de la tienda
        """
        self.nombre = nombre
        self.precios = np.array(precios)
        self.unidades_vendidas = np.array(unidades_vendidas)
        self.ingresos_diarios = self.precios[:, np.newaxis] * self.unidades_vendidas

    def ingresos_totales_por_dia(self):
        return self.ingresos_diarios.sum(axis=0)

    def dia_mayor_ingreso(self):
        ingresos_dia = self.ingresos_totales_por_dia()
        indice_max = ingresos_dia.argmax()
        return indice_max + 1, ingresos_dia[indice_max]

    def productos_mas_rentables(self, n=2):
        ingreso_total = self.ingresos_diarios.sum(axis=1)
        indices_top = ingreso_total.argsort()[-n:][::-1]
        return indices_top, ingreso_total[indices_top]

    def dias_ventas_altas(self, umbral):
        ingresos_dia = self.ingresos_totales_por_dia()
        dias_altos = ingresos_dia > umbral
        return np.where(dias_altos)[0] + 1  # para mostrar día 1-based

#Uso de la clase
precios = [15000, 22000, 18000, 25000, 30000]
unidades = [
    [5, 8, 6, 7, 10],
    [3, 6, 5, 4, 7],
    [8, 12, 10, 9, 11],
    [4, 5, 6, 3, 4],
    [6, 7, 8, 5, 9]
]

tienda = Tienda(precios, unidades, "Comercial XYZ")

print("Ingresos totales por día:", tienda.ingresos_totales_por_dia())
dia, monto = tienda.dia_mayor_ingreso()
print(f"Día con mayor ingreso: Día {dia} con ${monto:,}")
productos_top, ingresos_top = tienda.productos_mas_rentables()
print(f"Productos más rentables: {productos_top + 1} con ingresos {ingresos_top}")
dias_altos = tienda.dias_ventas_altas(400000)
print("Días con ventas altas (más de $400,000):", dias_altos)

"""**Solución sin usar Programación Orientada a objetos**"""

import numpy as np

# Datos iniciales
precios = np.array([15000, 22000, 18000, 25000, 30000])
unidades_vendidas = np.array([
    [5, 8, 6, 7, 10],
    [3, 6, 5, 4, 7],
    [8, 12, 10, 9, 11],
    [4, 5, 6, 3, 4],
    [6, 7, 8, 5, 9]
])

# Calcular ingresos diarios (producto por día)
ingresos_diarios = precios[:, np.newaxis] * unidades_vendidas

print("1. Ingresos diarios por producto y día:")
print(ingresos_diarios)

# Ingresos totales por día
ingresos_totales_dia = ingresos_diarios.sum(axis=0)
print("\n2. Ingresos totales por día:")
print(ingresos_totales_dia)

# Día con mayores ingresos
indice_dia_max = ingresos_totales_dia.argmax()
max_ingreso = ingresos_totales_dia[indice_dia_max]
print(f"\n3. Día con mayores ingresos: Día {indice_dia_max + 1} con ${max_ingreso:,}")

# Productos más rentables en la semana
ingreso_semanal_productos = ingresos_diarios.sum(axis=1)
top2_indices = ingreso_semanal_productos.argsort()[-2:][::-1]
print("\n4. Productos más rentables:")
for i in top2_indices:
    print(f"Producto {i+1} con ingreso total de ${ingreso_semanal_productos[i]:,}")

# Días con ventas superiores a $400,000
umbral = 400000
dias_ventas_altas = np.where(ingresos_totales_dia > umbral)[0] + 1
print(f"\n5. Días con ventas superiores a ${umbral:,}: {dias_ventas_altas.tolist()}")

# Sugerencia para la empresa (comentario)
print("\n6. Sugerencias para la empresa:")
print("- Enfocar promociones y stock en los productos más rentables.")
print("- Analizar y potenciar días con ventas bajas.")
print("- Usar datos para planificar inventarios y logística.")